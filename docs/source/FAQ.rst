.. _faq:

Frequently asked questions
**************************


General
=======


What happens if we run same code twice? Are there timestamps on the files or are we overwriting them?
-----------------------------------------------------------------------------------------------------

In the vast majority of cases, if you have not touched anything to your options, you will overwrite the output.

Two exceptions that actually have time stamps and are not over-written:

- The matlabbatches saved in the ``jobs`` folders as ``.mat`` and ``.json`` files.
- If you have saved your options with ``saveOptions``,
  then the output ``.json`` file is saved with a time stamp too.
  Most of the default ``getOptions`` templates include ``saveOptions`` as a last function call.

In most of other cases if you don't want to overwrite previous output,
you will have to change the output directory.

For the preprocessing workflows, in general you would have to specify a different ``opt.dir.ouput``.

For the statistics workflows, you have a few more options as the name of the output
folders includes information that comes from the options and / or the BIDS stats model.

The output folder name (generated by ``getFFXdir()`` for the subject level
and by ``getRFXdir()`` for the dataset level) should include the FWHM used on the BOLD images
as well as info specified in the ``Inputs`` section of the BIDS stats model JSON file
(like the name of the task or the MNI space of the input images).

.. code-block:: bash

  $ ls demos/MoAE/outputs/derivatives/cpp_spm-stats/sub-01/stats

  # Folder name for a model on the auditory task in SPM's MNI space
  # on data smoothed with a 6mm kernel
  task-auditory_space-IXI549Space_FWHM-6

But also the GLM folder will include the ``Name`` of the BIDS stats model
as description (``desc``) if this ``Name`` is not just the name ``opt.taskName``.

For example, here with the following BIDS stats model.

.. code-block:: bash

  $ head tests/dummyData/models/model-nback_smdl.json

  {
    "Name": "nback MVPA",     # <---- this gets appended to the folder name as description
    "BIDSModelVersion": "1.0.0",
    "Description": "for folder naming",
    "Input": {
      "task": "nback"
    }
    ...

And this code to set things up

.. code-block:: matlab

  subLabel = '02';
  opt.taskName = 'nback';
  opt.space = 'individual';

  opt.dir.stats = 'outputs/derivatives/cpp_spm-stats';

  ffxDir = getFFXdir(subLabel, opt);

Here is the expected output folder name

.. code-block:: matlab

  expectedOutput = fullfile(opt.dir.stats, 'sub-02', 'stats', ...
                            'task-nback_space-individual_FWHM-6_desc-nbackMVPA');


How can I know that things are set up properly before I run an analysis?
------------------------------------------------------------------------

If you want to set things up but not let SPM actually run the batches you can use the option:

  ``opt.dryRun = true()``

This can be useful when debugging. You may still run into errors when SPM jobman takes
over and starts running the batches, but you can at least see if the batches will be constructed
without error and then inspect with the SPM GUI to make sure everything is fine.

What is the BIDS way to name and store (Regions of Interest) ROIs?
------------------------------------------------------------------

There is no "official" way to name ROI in BIDS,
but you can apply BIDS naming principles to name those.

The closest things to ROI naming are the ``masks`` for the `BIDS derivatives
<https://bids-specification.readthedocs.io/en/latest/05-derivatives/03-imaging.html#masks>`_

Here is an example from the  :ref:`face repetition demo`::

  cpp_spm-roi
  ├── group
  │   ├── hemi-L_space-MNI_label-V1d_desc-wang_mask.json
  │   ├── hemi-L_space-MNI_label-V1d_desc-wang_mask.nii
  │   ├── hemi-L_space-MNI_label-V1v_desc-wang_mask.json
  │   ├── hemi-L_space-MNI_label-V1v_desc-wang_mask.nii
  │   ├── hemi-R_space-MNI_label-V1d_desc-wang_mask.json
  │   ├── hemi-R_space-MNI_label-V1d_desc-wang_mask.nii
  │   ├── hemi-R_space-MNI_label-V1v_desc-wang_mask.json
  │   └── hemi-R_space-MNI_label-V1v_desc-wang_mask.nii
  └── sub-01
      └── roi
          ├── sub-01_hemi-L_space-individual_label-V1d_desc-wang_mask.nii
          ├── sub-01_hemi-L_space-individual_label-V1v_desc-wang_mask.nii
          ├── sub-01_hemi-R_space-individual_label-V1d_desc-wang_mask.nii
          └── sub-01_hemi-R_space-individual_label-V1v_desc-wang_mask.nii

ROIs that are defined in some MNI space are going to be the same across subjects,
so you could store a "group" folder (this is not BIDSy but is less redundant
than having a copy of the same file for each subject).

The ``desc`` entity (description) here is used to denotate the atlas the ROI taken from,
so if you are building yours from a localizer you might not need to use it.

Ideally you would want to add a JSON file to add metadata about those ROIs.

You can use bids matlab to help you create bids valid filenames.

.. code-block:: matlab

  >> name_spec.ext = '.nii';
  >> name_spec.suffix = 'mask';
  >> name_spec.entities = struct( ...
                                'hemi', 'R', ...
                                'space', 'MNI', ...
                                'label', 'V1v', ...
                                'desc', 'wang');
  >> file = bids.File(name_spec);
  >> file.filename

     hemi-R_space-MNI_label-V1v_desc-wang_mask.nii


Results
=======


How can I change which slices are shown in a montage?
-----------------------------------------------------

| In the ``bidsResults.m`` I get an image with the overlay of different slices.
| How can I change which slices are shown?

When you define your options the range of slices that are to be shown can be
changed like this (see ``bidsResults`` help section for more information):

.. code-block:: matlab

    % slices position in mm [a scalar or a vector]
    opt.result.Nodes(1).Output.montage.slices = -12:4:60;

    % slices orientation: can be 'axial' 'sagittal' or 'coronal'
    % axial is default
    opt.result.Nodes(1).Output.montage.orientation = 'axial';
